    /*  1 - Hacer un programa para ingresar una lista de 10 números y luego informar
    cuántos de los números ingresados son perfectos. Se informa 1 resultado al
    final */

    int perfectos = 0;

    for(int i=0; i < 10; i++){
        int numero;
        int divisor = 1;
        int sumaDivisores = 0;

        cout << "Ingrese un numero: ";
        cin >> numero;

        while(divisor < numero){
            if(numero % divisor == 0){
                sumaDivisores += divisor;
            }
            divisor++;
        }
        if(numero > 0 && sumaDivisores == numero){
            perfectos++;
        }
    }

    cout << "Cantidad de numeros perfectos: " << perfectos << endl;


    /* 2 -  Hacer un programa para ingresar una lista de 10 
    números y luego informar cuantos de los números 
    ingresados son primos. Se informa 1 resultado al
    final.*/ 

    int numero; 
    int primos = 0; 

    for(int i=0; i < 10; i++){ 

        cout << "Ingrese un numero: "; 
        cin >> numero; 

        int divisor = 2; 
        int divisores = 1; 

        while(divisor <= numero){ 
            if(numero % divisor == 0){ 
                divisores++; 
            } 
            divisor++; 
        } 
        if(divisores == 2){ 
            primos++; 
        } 
    } 

    cout << "La cantidad de numeros primos es: " << primos << endl;


    /*  3 - Hacer un programa para ingresar una lista de números que finaliza cuando se
    ingresa un cero y luego informar el porcentaje de números primos y el
    porcentaje de números no primos. Se informan 2 resultados al final */

    int numero;
    int primos = 0;
    float cantidadNumeros = 0;

    cout << "Ingrese un numero: ";
    cin >> numero;

    while(numero != 0){
        cantidadNumeros++;

        int divisor = 2;
        int divisores = 2;

        while(divisor < numero){
            if(numero % divisor == 0){
                divisores++;
                break;
            }
            divisor++;
        }
        if(numero > 1 && divisores == 2){
            primos++;
        }

        cout << "Ingrese un numero: ";
        cin >> numero;
    }

    float porcentajePrimos = (primos*100)/cantidadNumeros;
    float porcentajeNoPrimos = 100 - porcentajePrimos;

    cout << "Porcentaje de numeros primos: " << porcentajePrimos << "%" << endl;
    cout << "Porcentaje de numeros no primos: " << porcentajeNoPrimos<< "%" << endl;


    /* 4 - Dada una lista de números compuesta por 10 grupos y cada grupo separado del
    siguiente por un cero, se pide determinar e informar:
    a) Para cada uno de los grupos el máximo de los números pares y el máximo de los
    números impares.
    b) Para cada uno de los grupos el porcentaje de números negativos y números positivos.
    c) Cuantos números positivos había en total entre los 10 grupos.*/

    int positivosTotales = 0;

    for(int i=1; i <= 10; i++){

        int maximoPar = -99999;
        int maximoImpar = -99999;
        int positivos = 0;
        int negativos = 0;
        float totalGrupo = 0;
        float porcentajePositivos;
        float porcentajeNegativos;
        int numero;

        cout << "Ingrese un numero: ";
        cin >> numero;

        while(numero != 0){
            totalGrupo++;
            if(numero > 0){
                positivos++;
                positivosTotales++;
            }else{
                negativos++;
            }
            if(numero % 2 == 0 && numero > maximoPar){
                maximoPar = numero;
            }else if(numero % 2 != 0 && numero > maximoImpar){
                maximoImpar = numero;
            }

            cout << "Ingrese un numero: ";
            cin >> numero;
        }

        porcentajePositivos = (positivos*100)/totalGrupo;
        porcentajeNegativos = (negativos*100)/totalGrupo;

        cout << endl << "Maximo par grupo " << i << ": " << maximoPar << endl;
        cout << "Maximo impar grupo " << i << ": " << maximoImpar << endl;
        cout << "Porcentaje de positivos grupo " << i << ": " << porcentajePositivos << "%" << endl;
        cout << "Porcentaje de negativos grupo " << i << ": " <<  porcentajeNegativos << "%" << endl << endl;
    }

    cout << endl << "Positivos totales: " << positivosTotales << endl;


    /*  5 - Se dispone de una lista de 10 grupos de números enteros separados entre ellos
    por ceros. Se pide determinar e informar:
    a) El número de grupo con mayor porcentaje de números impares positivos
    respecto al total de números que forman el grupo. Se informa 1 resultado al
    final.
    b) Informar cuantos grupos están formados por todos números ordenados de
    mayor a menor. Se informa 1 resultado al final. */

    int grupoMayorPorcentaje;
    float mayorPorcentaje;
    int cantidadGruposOrdenados = 0;

    for(int i=1; i <= 10; i++){
        int numero;
        int anterior;
        float cantidadNumerosGrupo = 0;
        int imparesPositivos = 0;
        bool ordenado = true;

        cout << "Ingrese un numero: ";
        cin >> numero;

        while(numero != 0){
            cantidadNumerosGrupo++;
            if(numero > 0 && numero % 2 != 0){
                imparesPositivos++;
            }
            if(cantidadNumerosGrupo == 1){
                anterior = numero;
            }else {
                if(anterior < numero){
                    ordenado = false;
                }
            }
            anterior = numero;

            cout << "Ingrese un numero: ";
            cin >> numero;
        }

        float porcentajeImparesPositivos = (imparesPositivos*100)/cantidadNumerosGrupo;

        if(i == 1){
            mayorPorcentaje = porcentajeImparesPositivos;
            grupoMayorPorcentaje = i;
        }else{
            if(mayorPorcentaje < porcentajeImparesPositivos){
                mayorPorcentaje = porcentajeImparesPositivos;
                grupoMayorPorcentaje = i;
            }
        }

        if(ordenado){
            cantidadGruposOrdenados++;
        }
    }

    cout << "Grupo con mayor porcentaje de numeros impares positivos: " << grupoMayorPorcentaje << endl;
    cout << "Grupos ordenados de mayor a menor: " << cantidadGruposOrdenados << endl;


    /*  6 - Dada una lista de números compuesta por grupos donde cada grupo está
    separado del siguiente por un cero, y la lista de números finaliza cuando se
    ingresan dos ceros consecutivos, se pide determinar e informar la cantidad de
    grupos que cuentan con una lista de números impares que se encuentran
    ordenados de mayor a menor. Los números impares pueden no ser
    consecutivos, pero sí deben estar ordenados.
    Ejemplo 1: 3, 10, 7, 5, 11, 7, 14, 0. Este grupo NO cumple lo requerido y no debe
    ser contado.
    Ejemplo 2: -6, 12, 13, 8, 9, 7, 0. Este grupo SI cumple lo requerido y debe ser
    contado. */

    int numero;
    int cerosConsecutivos = 0;
    int cantidadGruposOrdenados = 0;

    cout << "Ingrese un numero: ";
    cin >> numero;

    if(numero == 0){
        cerosConsecutivos++;
    }

    while(cerosConsecutivos < 2){
        int anteriorImpar;
        bool ordenado = true;
        int cantidadNumerosGrupo = 0;

        cout << "Ingrese un numero: ";
        cin >> numero;

        if(numero == 0){
            cerosConsecutivos++;
        }

        while(numero != 0){
            cantidadNumerosGrupo++;
            cerosConsecutivos=0;
            if(numero % 2 != 0){
                if(cantidadNumerosGrupo == 1){
                    anteriorImpar = numero;
                }else{
                    if(anteriorImpar < numero){
                        ordenado = false;
                    }
                }
                anteriorImpar = numero;
            }

            cout << "Ingrese un numero: ";
            cin >> numero;

            if(numero == 0){
            cerosConsecutivos++;
            }
        }

        if(cantidadNumerosGrupo > 1 && ordenado){
            cantidadGruposOrdenados++;
        }
    }

    cout << endl << "Grupos ordenados de mayor a menor: " << cantidadGruposOrdenados << endl;


    /*  7 - Se dispone de una lista de 10 grupos de números enteros separados entre ellos
    por ceros. Se pide determinar e informar:
    a) Informar el promedio de cada grupo. Se informa 1 resultado por cada grupo.
    b) Determinar e informar el valor mínimo de todos los grupos, indicando en qué
    grupo se encontró y su posición relativa en el mismo. Se informan 3 resultados
    al final.
    c) El mayor de los promedios y a que grupo pertenecía. Se informan 2
    resultados al final. */

    float mayorPromedio;
    int valorMinimo;
    int grupoValorMinimo;
    int posicionValorMinimo;
    int grupoMayorPromedio;

    for(int i=1; i <= 3; i++){

        int numero;
        float cantidadNumerosGrupo = 0;
        int valorTotalGrupo = 0;
        float promedioGrupo;

        cout << "Ingrese un numero: ";
        cin >> numero;

        while(numero != 0){
            cantidadNumerosGrupo++;
            valorTotalGrupo += numero;
            if(i == 1 && cantidadNumerosGrupo == 1){
                valorMinimo = numero;
                grupoValorMinimo = i;
                posicionValorMinimo = cantidadNumerosGrupo;
            }else{
                if(valorMinimo > numero){
                    valorMinimo = numero;
                    grupoValorMinimo = i;
                    posicionValorMinimo = cantidadNumerosGrupo;
                }
            }

            cout << "Ingrese un numero: ";
            cin >> numero;
        }

        promedioGrupo = valorTotalGrupo/cantidadNumerosGrupo;
        if(i == 1){
            mayorPromedio = promedioGrupo;
            grupoMayorPromedio = i;
        }else{
            if(mayorPromedio < promedioGrupo){
                mayorPromedio = promedioGrupo;
                grupoMayorPromedio = i;
            }
        }

        cout << endl << "Promedio grupo: " << i << ": " << promedioGrupo << endl << endl;
    }

    cout << endl << "Valor minimo encontrado: " << valorMinimo << endl;
    cout << "Grupo valor minimo encontrado: " << grupoValorMinimo << endl;
    cout << "Posicion de valor minimo encontrado: " << posicionValorMinimo << endl;
    cout << "Promedio mayor: " << mayorPromedio << ". De grupo: " << grupoMayorPromedio << endl;


    /*  8 - Hacer un programa para ingresar por teclado 5 grupos compuestos por
    números ordenados de menor a mayor. El final de cada grupo se detecta al
    ingresar un número menor a su anterior.
    Se debe obtener y emitir:
    a) Para cada uno de los grupos la cantidad de números pares que lo componen.
    Se informa 1 resultado por cada grupo.
    b) El menor número par de cada uno de los grupos. Se informa 1 resultado por
    cada grupo.
    c) El último número positivo de cada uno de los grupos y su ubicación dentro
    del grupo. Se informan 2 resultados por cada grupo */

    for(int i=1; i <= 5; i++){

        int numero, anterior;
        int cantidadPares=0;
        int menorPar;
        int ultPositivo, posUltimoPositivo;
        int cantidadPositivos=0;
        int j=0;

        if(i == 1){
            cout << "Ingrese un numero: ";
            cin >> numero;
            anterior = numero -1;
        }else{
            anterior = numero-1;
        }

        while(numero > anterior){
            j++;
            if(numero % 2 == 0){
                cantidadPares++;
                if(cantidadPares == 1){
                    menorPar = numero;
                }else{
                    if(menorPar > numero){
                        menorPar = numero;
                    }
                }
            }
            if(numero > 0){
                cantidadPositivos++;
                if(cantidadPositivos == 1){
                    ultPositivo = numero;
                    posUltimoPositivo = j;
                }else{
                    if(posUltimoPositivo < j){
                        ultPositivo = numero;
                        posUltimoPositivo = j;
                    }
                }
            }

            anterior = numero;

            cout << "Ingrese un numero: ";
            cin >> numero;
        }

        cout << endl << "Cantidad de pares en grupo " << i << ": " << cantidadPares << endl;
        cout << "Menor numero par en grupo " << i << ": " << menorPar << endl;
        cout << "Ultimo numero positivo en grupo " << i << ": " << ultPositivo << endl;
        cout << "Posicion ultimo positivo en grupo " << i << ": " << posUltimoPositivo << endl << endl;
    }

