    /* 1 -  Hacer un programa para ingresar una lista de 10 
    números y luego informar cuantos de los números 
    ingresados son primos.*/ 

    int numero; 
    int primos = 0; 

    for(int i=0; i < 10; i++){ 

        cout << "Ingrese un numero: "; 
        cin >> numero; 

        int divisor = 2; 
        int divisores = 1; 

        while(divisor <= numero){ 
            if(numero % divisor == 0){ 
                divisores++; 
            } 
            divisor++; 
        } 
        if(divisores == 2){ 
            primos++; 
        } 
    } 

    cout << "La cantidad de numeros primos es: " << primos << endl; 


     /* 2 - Dada una lista de números compuesta por 10 grupos y cada grupo separado del
    siguiente por un cero, se pide determinar e informar:
    a) Para cada uno de los grupos el máximo de los números pares y el máximo de los
    números impares.
    b) Para cada uno de los grupos el porcentaje de números negativos y números positivos.
    c) Cuantos números positivos había en total entre los 10 grupos.*/

    int positivosTotales = 0;

    for(int i=1; i <= 10; i++){

        int maximoPar = -99999;
        int maximoImpar = -99999;
        int positivos = 0;
        int negativos = 0;
        float totalGrupo = 0;
        float porcentajePositivos;
        float porcentajeNegativos;
        int numero;

        cout << "Ingrese un numero: ";
        cin >> numero;

        while(numero != 0){
            totalGrupo++;
            if(numero > 0){
                positivos++;
                positivosTotales++;
            }else{
                negativos++;
            }
            if(numero % 2 == 0 && numero > maximoPar){
                maximoPar = numero;
            }else if(numero % 2 != 0 && numero > maximoImpar){
                maximoImpar = numero;
            }

            cout << "Ingrese un numero: ";
            cin >> numero;
        }

        porcentajePositivos = (positivos*100)/totalGrupo;
        porcentajeNegativos = (negativos*100)/totalGrupo;

        cout << endl << "Maximo par grupo " << i << ": " << maximoPar << endl;
        cout << "Maximo impar grupo " << i << ": " << maximoImpar << endl;
        cout << "Porcentaje de positivos grupo " << i << ": " << porcentajePositivos << "%" << endl;
        cout << "Porcentaje de negativos grupo " << i << ": " <<  porcentajeNegativos << "%" << endl << endl;
    }

    cout << endl << "Positivos totales: " << positivosTotales << endl;


     /* 3 - Se dispone de una lista de 10 grupos de números enteros separados entre ellos por
    ceros. Se pide determinar e informar:
    a) El número de grupo con mayor porcentaje de números impares positivos respecto al total
    de números que forman el grupo.
    b) Para cada grupo el último número primo y en qué orden apareció en ese grupo, si en un
    grupo no hubiera números primos informarlo con un cartel aclaratorio.
    c) Informar cuantos grupos están formados por todos números ordenados de mayor a
    menor*/

    int grupoConMayorPorcentajeImpPos;
    float mayorPorcentajeNumerosImpPos;
    int gruposOrdenados = 0;

    for(int i=1; i <= 10; i++){

        int numero;
        float porcentajeNumerosImpPosGrupo = 0;
        float cantidadNumeros = 0;
        int imparesPositivos = 0;
        bool hayPrimo = false;
        int ultimoPrimo = 0;
        int posicionUltimoPrimo = 0;
        bool grupoOrdenado = true;

        cout << "Ingrese un numero: ";
        cin >> numero;

        while(numero != 0){

            cantidadNumeros++;
            if(numero % 2 != 0 && numero > 0){
                imparesPositivos++;
            }

            int divisor = 2;
            int divisores = 1;
            while(divisor <= numero){
                if(numero % divisor == 0){
                    divisores++;
                }
                divisor++;
            }
            if(divisores == 2){
                hayPrimo = true;
                ultimoPrimo = numero;
                posicionUltimoPrimo = cantidadNumeros;
            }
            int anterior;
            if(cantidadNumeros == 1){
                anterior = numero;
            }else{
                if(anterior > numero){
                    anterior = numero;
                }else{
                    grupoOrdenado = false;
                }
            }

            cout << "Ingrese un numero: ";
            cin >> numero;
        }

        porcentajeNumerosImpPosGrupo = (imparesPositivos*100)/cantidadNumeros;

        if(i ==1){
            mayorPorcentajeNumerosImpPos = porcentajeNumerosImpPosGrupo;
            grupoConMayorPorcentajeImpPos = i;
        }else{
            if(mayorPorcentajeNumerosImpPos < porcentajeNumerosImpPosGrupo){
                mayorPorcentajeNumerosImpPos = porcentajeNumerosImpPosGrupo;
                grupoConMayorPorcentajeImpPos = i;
            }
        }
        if(hayPrimo){
            cout << endl << "Ultimo numero primo: " << ultimoPrimo << ". Posicion: " << posicionUltimoPrimo << endl;
        } else{
            cout << endl <<"No hay primos en grupo " << i << endl;
        }
        if(grupoOrdenado && cantidadNumeros >= 2){
            gruposOrdenados++;
        }
        cout << "Porcentaje grupo " << i << " es: " << porcentajeNumerosImpPosGrupo << "%." << endl << endl;
    }
    cout << "Grupo con mayor porcentaje de impares positivos: " << grupoConMayorPorcentajeImpPos << ". "<< mayorPorcentajeNumerosImpPos << "%" << endl;
    cout << "Cantidad de grupos ordenados de mayor a menor: " << gruposOrdenados << endl;


    /* 4 - Dada una lista de números enteros todos distintos entre sí y que finaliza con un cero,
    determinar e informar con un cartel aclaratorio si los números primos que aparezcan en la
    misma están ordenados de menor a mayor. Los números positivos primos pueden no ser
    consecutivos, pero sí estar ordenados.
    Por ejemplo:
    4, 5, 7, 12, 13, 0 Se emite un cartel que diga “Ordenados” (5,7 y 13)
    2, 10, 3, 5, 11, 7, 14, 0 Se emite un cartel que diga “Desordenados” (2, 3, 5, 11 y 7)*/

    int numero;
    int primoAnterior;
    int cantidadPrimos = 0;
    bool esOrdenado = true;

    cout << "Ingrese un numero: ";
    cin >> numero;

    while(numero != 0){
        int divisor = 2;
        int divisores = 1;
        while(divisor <= numero){
            if(numero % divisor == 0){
                divisores++;
            }
            divisor++;
        }
        if(divisores == 2){
            cantidadPrimos++;
            if(cantidadPrimos == 1){
                primoAnterior = numero;
            }else{
                if(primoAnterior > numero){
                esOrdenado = false;
                }
            primoAnterior = numero;
            }
        }

        cout << "Ingrese un numero: ";
        cin >> numero;
    }
    if(esOrdenado){
        cout << "Grupo ordenado." << endl;
    } else {
        cout << "Grupo desordenado." << endl;
    }


    /* 5 - Se dispone de una lista de 10 grupos de números enteros separados entre ellos por
    ceros. Se pide determinar e informar:
    a) Calcular el promedio de valores de cada grupo.
    b) Determinar e informar el valor mínimo de todo los grupos, indicando en que grupo se
    encontró y su posición relativa en el mismo.
    c) El mayor de los promedios y a que grupo pertenecía */


    float promedioMayor;
    int grupoPromedioMayor;
    int valorMinimo;
    int grupoValorMinimo;
    int posicionValorMinimo;

    for(int i = 1; i <= 10; i++){

        bool esCero = false;
        int j = 0;
        int cantidadNumerosGrupo = 0;
        int valorTotalGrupo = 0;
        int numero;

        while(!esCero){

            cout << "Ingrese un numero: ";
            cin >> numero;

            if(numero != 0){
                j++;
                valorTotalGrupo += numero;
                cantidadNumerosGrupo++;
                if(j == 1 && i == 1){
                    valorMinimo = numero;
                    grupoValorMinimo = i;
                    posicionValorMinimo = j;
                }
                if(valorMinimo > numero){
                    valorMinimo = numero;
                    grupoValorMinimo = i;
                    posicionValorMinimo = j;
                }
            } else {
                esCero = true;
            }
        }

        if(i == 1){
            promedioMayor = valorTotalGrupo/(float)cantidadNumerosGrupo;
            grupoPromedioMayor = i;
        } else {
            if(promedioMayor < valorTotalGrupo/(float)cantidadNumerosGrupo){
                promedioMayor = valorTotalGrupo/(float)cantidadNumerosGrupo;
                grupoPromedioMayor = i;
            }
        }

    }

    cout << endl <<"Valor minimo: " << valorMinimo << " . En grupo: " << grupoValorMinimo << ". Posicion: "<< posicionValorMinimo << endl;
    cout << "Promedio mayor: " << promedioMayor << ". En grupo: " << grupoPromedioMayor << endl;


    /* 6 - Hacer un programa para ingresar por teclado 10 grupos compuestos por números
    ordenados de menor a mayor. El final de cada grupo se detecta al ingresar un número
    menor a su anterior.
    Se debe obtener y emitir:
    a) Para cada uno de los grupos la cantidad de números primos que lo componen.
    b) El mínimo número par de cada uno de los grupos.
    c) El anteúltimo y último número positivo de cada uno de los grupos */

    for(int i = 1; i <= 3; i++){

        bool anteriorMenor = false;
        bool hayPar = false;
        bool hayPositivo = false;
        int numero;
        int anterior;
        int j = 0;
        int cantidadPrimosGrupo = 0;
        int minimoPar;
        int anteultimoPositivo;
        int ultimoPositivo;

        while(!anteriorMenor){
            j++;
            cout << "Ingrese un numero: ";
            cin >> numero;

            if(j == 1){
                anterior = numero;
            } else {
                if(anterior > numero){
                    anteriorMenor = true;
                }
            }

            int divisor = 2;
            int divisores = 1;
            while(divisor <= numero){
                if(numero % divisor == 0){
                    divisores++;
                }
            divisor++;
            }
            if(divisores == 2){
                cantidadPrimosGrupo++;
            }

            if(numero % 2 == 0 && !hayPar){
                minimoPar = numero;
                hayPar = true;
            } else {
                if(numero % 2 == 0 && hayPar){
                    if(minimoPar > numero){
                        minimoPar = numero;
                    }
                }
            }

            if(numero > 0 && !hayPositivo){
                anteultimoPositivo = numero;
                ultimoPositivo = numero;
                hayPositivo = true;
            } else {
                if(numero > 0 && hayPositivo){
                    anteultimoPositivo = ultimoPositivo;
                    ultimoPositivo = numero;
                }
            }
            anterior = numero;
        }

        cout << endl << "Cantidad primos en grupo " << i << ": " << cantidadPrimosGrupo << endl;
        if(hayPar){
            cout << "Minimo numero par grupo " << i << ": "  << minimoPar << endl;
        } else {
            cout << "No se ingresaron pares en grupo " << i << endl;
        }
        cout << "Anteultimo numero positivo grupo " << i << ": " << anteultimoPositivo << endl;
        cout << "Ultimo numero positivo grupo " << i << ": " << ultimoPositivo << endl << endl;
    }

    /* 7 - Hacer un programa para ingresar los valores de los pesos de distintas encomiendas que
    se deben enviar a distintos clientes y que finaliza cuando se ingresa un peso negativo. Se
    deben agrupar las encomiendas en camiones que pueden transportar hasta 200 kilos en
    total. Se pide determinar e informar:
    a) El número de cada camión y peso total de encomiendas. Camión 1: 170 kg, Camión 2:
    170 kg, etc.
    b) El número de camión que transporta mayor cantidad de encomiendas. En el ejemplo
    anterior sería el Camión 3 con 4 encomiendas.*/

    bool pesoNegativo = false;
    bool sobrante = false;
    int camiones = 0;
    int camionConMasEncomiendas;
    int numeroMayorEncomiendas;

    while(!pesoNegativo){

        bool pesoMaximo = false;
        int pesoEncomienda;
        int pesoCamion = 0;
        int encomiendas = 0;
        int pesoSobrante;
        camiones++;

        if(sobrante){
            pesoCamion = pesoSobrante;
            encomiendas = 1;
        }

        while(!pesoMaximo){
            cout << "Ingrese el peso de la encomienda: ";
            cin >> pesoEncomienda;

            if (pesoEncomienda < 0) {
                pesoNegativo = true;
                break;
            }
            if (pesoEncomienda + pesoCamion <= 200) {
                encomiendas++;
                pesoCamion += pesoEncomienda;
                sobrante = false;
                if(pesoCamion == 200){
                    break;
                }
            } else {
                pesoSobrante = pesoEncomienda;
                sobrante = true;
                break;
            }

        }

        if(camiones == 1){
            camionConMasEncomiendas = camiones;
            numeroMayorEncomiendas = encomiendas;
        } else {
            if(numeroMayorEncomiendas < encomiendas){
                numeroMayorEncomiendas = encomiendas;
                camionConMasEncomiendas = camiones;
            }
        }

        if(encomiendas == 0){
            break;
        }

        cout << endl << "Numero camion: " << camiones << endl;
        cout << "Encomiendas: " << encomiendas << endl;
        cout << "Peso: " << pesoCamion << endl << endl;

    }

    cout << endl << "Camion con mas encomiendas: " << camionConMasEncomiendas << endl;
    cout << "Numero mayor de encomiendas: " << numeroMayorEncomiendas << endl;

    /* 8 - Dada una lista de números compuesta por grupos donde cada grupo está separado del
    siguiente por un cero, y la lista de números finaliza cuando se ingresan dos ceros
    consecutivos, se pide determinar e informar:
    a) La cantidad de grupos en los que se detecten un total de 4 o más números primos
    consecutivos. Se informa 1 resultado al final.
    b) Para cada uno de los grupos en los que se haya detectado números negativos, el mayor y
    el segundo mayor de los mismos y en que posición estaban dentro del subgrupo. En los
    grupos sin negativos, informar “Grupo sin negativos”. Se informan 4 resultados por cada
    grupo.
    c) El mayor número primo de todos los grupos, informando además en que grupo y en qué
    posición del mismo fue detectado. Se informan 3 resultados al final.
    Ejemplo de una posible lista: 5, 4, 3, 0, 18, -5, 20, 0, 7, 11, 25, 4, 0, 0.*/

    int numero;
    int cerosConsecutivos = 0;
    int numeroGrupo = 0;
    int cantidadGruposPrimosConsecutivos = 0;
    int mayorPrimo = 0;
    int grupoMayorPrimo = 0;
    int posicionMayorPrimo = 0;

    while(cerosConsecutivos < 2){
        int cantidadNegativos = 0;
        int posicionEnGrupo = 0;
        int primosConsecutivos = 0;
        int mayorNegativo;
        int posicionMayorNegativo;
        int segundoMayorNegativo;
        int posicionSegundoMayorNegativo;

        cout << "Ingrese un numero: ";
        cin >> numero;

        if(numero == 0){
            cerosConsecutivos++;
        }
        if(cerosConsecutivos == 2){
            break;
        }

        while(numero != 0){
            if(numeroGrupo == 0){
                numeroGrupo++;
            }
            cerosConsecutivos = 0;
            posicionEnGrupo++;
            if(numero < 0){
                cantidadNegativos++;
                if(cantidadNegativos == 1){
                    mayorNegativo = numero;
                    posicionMayorNegativo = posicionEnGrupo;
                }
                if(cantidadNegativos == 2){
                    if(numero > mayorNegativo){
                        segundoMayorNegativo = mayorNegativo;
                        posicionSegundoMayorNegativo = posicionMayorNegativo;
                        mayorNegativo = numero;
                        posicionMayorNegativo = posicionEnGrupo;
                    }else{
                        segundoMayorNegativo = numero;
                        posicionSegundoMayorNegativo = posicionEnGrupo;
                    }
                }else{
                    if(numero > mayorNegativo){
                        segundoMayorNegativo = mayorNegativo;
                        posicionSegundoMayorNegativo = posicionMayorNegativo;
                        mayorNegativo = numero;
                        posicionMayorNegativo = posicionEnGrupo;
                    }else{
                        if(numero > segundoMayorNegativo){
                            segundoMayorNegativo = numero;
                            posicionSegundoMayorNegativo = numero;
                        }
                    }
                }
            }else{
                int divisor = 2;
                int divisores = 1;
                while(divisor <= numero){
                    if(numero % divisor == 0){
                        divisores++;
                    }
                    divisor++;
                }
                if(divisores == 2){
                    primosConsecutivos++;
                    if(numero > mayorPrimo){
                        mayorPrimo = numero;
                        grupoMayorPrimo = numeroGrupo;
                        posicionMayorPrimo = posicionEnGrupo;
                    }
                    if(primosConsecutivos == 4){
                        cantidadGruposPrimosConsecutivos++;
                    }
                }else{
                    primosConsecutivos = 0;
                }
            }

            cout << "Ingrese un numero: ";
            cin >> numero;

            if(numero == 0){
                cerosConsecutivos++;
            }
        }
        if(numeroGrupo != 0){
            if(cantidadNegativos >= 2){
                cout << endl <<"Mayor negativo grupo: " << numeroGrupo << ": " << mayorNegativo << ". Posicion: " << posicionMayorNegativo << endl;
                cout <<"Segundo mayor negativo grupo: " << numeroGrupo << ": " << segundoMayorNegativo << ". Posicion: " << posicionSegundoMayorNegativo << endl << endl;
            }else if(cantidadNegativos == 1){
                cout << endl <<"Mayor negativo grupo: " << numeroGrupo << ": " << mayorNegativo << ". Posicion: " << posicionMayorNegativo << endl;
                cout << "No se ingreso un segundo numero negativo" << endl << endl;
            }else{
                cout << endl << "Grupo " << numeroGrupo << " sin numeros negativos" << endl << endl;
            }
            numeroGrupo++;
        }
    }

    if(mayorPrimo == 0){
        cout << endl << "No se ingresaron numeros primos" << endl;
    }else{
        cout << endl << "Cantidad de grupos con 4 o mas numeros primos consecutivos: " << cantidadGruposPrimosConsecutivos << endl;
        cout << "Mayor numero primo encontrado: " << mayorPrimo << " en el grupo: " << grupoMayorPrimo << " en la posicion: " << posicionMayorPrimo << endl;
    }

    int numeroArticulo;
    int articuloAnterior;
    int cantidadArticulosIngresados = 0;
    int primeraSemana = 0;
    int segundaSemana = 0;
    int terceraSemana = 0;
    int cuartaSemana = 0;
    int mejorSemana;
    std::string laMejorSemana;
    int artMejorPrimerQuincena = 0;
    int ventasMejorQuincena = 0;

    cout << "Ingrese el numero de articulo: ";
    cin >> numeroArticulo;

    while(numeroArticulo !=  0){

        if(numeroArticulo == 0){
            break;
        }
        int dia;
        int cantidadArticulos;
        int importeVenta;
        int recaudacionDelMes = 0;
        int ventasPrimerQuincena = 0;

        articuloAnterior=numeroArticulo;

        while(numeroArticulo == articuloAnterior){

            cout << "Ingrese el dia de la venta: ";
            cin >> dia;

            cout << "Ingrese la cantidad de articulos vendidos: ";
            cin >> cantidadArticulos;

            cout << "Ingrese el importe de la venta: ";
            cin >> importeVenta;

            recaudacionDelMes += importeVenta;

            if(dia <= 15){
                ventasPrimerQuincena += cantidadArticulos;
                if(dia <= 7){
                    primeraSemana += cantidadArticulos;
                } else{
                    segundaSemana += cantidadArticulos;
                }
            } else if(dia > 15 && dia <= 23){
                terceraSemana += cantidadArticulos;
            } else{
                cuartaSemana += cantidadArticulos;
            }

            cout << "Ingrese el numero de articulo: ";
            cin >> numeroArticulo;
        }

        if(cantidadArticulosIngresados == 0){
            artMejorPrimerQuincena = articuloAnterior;
        }else{
            if(ventasPrimerQuincena > ventasMejorQuincena){
                artMejorPrimerQuincena = articuloAnterior;
                ventasMejorQuincena = ventasPrimerQuincena;
            }
        }

        cout << endl << "Recaudacion de articulo " << articuloAnterior << ": " << "$" << recaudacionDelMes << endl << endl;

        cantidadArticulosIngresados++;
    }

    laMejorSemana = "Primera Semana";
    if(segundaSemana > mejorSemana){
        laMejorSemana = "Segunda Semana";
    }
    if(terceraSemana > mejorSemana){
        laMejorSemana = "Tercera Semana";
    }
    if(cuartaSemana > mejorSemana){
        laMejorSemana = "Cuarta Semana";
    }

    cout << endl << "Semana con mejor venta: " << laMejorSemana << endl;

    if(artMejorPrimerQuincena == 0){
        cout << "No se vendierona articulos en la primer quincena" << endl;
    } else{
        cout << "Articulo mas vendido primer quincena: " << artMejorPrimerQuincena << endl;
    }


/* 9 - Una empresa registró las ventas que realizó durante el mes anterior.
    Para cada venta se tienen los siguientes datos:
    - Número de artículo (1 a 30)
    - Día (1 a 31)
    - Cantidad de artículos vendidos
    - Importe recaudado por las ventas en ese día
    Este lote finaliza con un registro con número de artículo igual a cero.
    Los registros están agrupados por número de artículo. Se pide determinar e informar:
    a) El número del artículo más vendido en total considerando las ventas de la primera
    quincena. Se considera primera quincena los días del 1 al 15 inclusive.
    b) Para cada uno de los artículos informar la recaudación total considerando todas las
    ventas del mes.
    c) Informar la semana en la que se vendió mayor cantidad de artículos en total. Se
    considera:
    Primera Semana: días 1 al 7. Segunda Semana: días 8 al 15.
    Tercera Semana: días 16 al 23. Cuarta Semana: días 24 al 31 */

    int numeroArticulo;
    int articuloAnterior;
    int cantidadArticulosIngresados = 0;
    int primeraSemana = 0;
    int segundaSemana = 0;
    int terceraSemana = 0;
    int cuartaSemana = 0;
    int mejorSemana;
    std::string laMejorSemana;
    int artMejorPrimerQuincena = 0;
    int ventasMejorQuincena = 0;

    cout << "Ingrese el numero de articulo: ";
    cin >> numeroArticulo;

    while(numeroArticulo !=  0){

        if(numeroArticulo == 0){
            break;
        }
        int dia;
        int cantidadArticulos;
        int importeVenta;
        int recaudacionDelMes = 0;
        int ventasPrimerQuincena = 0;

        articuloAnterior=numeroArticulo;

        while(numeroArticulo == articuloAnterior){

            cout << "Ingrese el dia de la venta: ";
            cin >> dia;

            cout << "Ingrese la cantidad de articulos vendidos: ";
            cin >> cantidadArticulos;

            cout << "Ingrese el importe de la venta: ";
            cin >> importeVenta;

            recaudacionDelMes += importeVenta;

            if(dia <= 15){
                ventasPrimerQuincena += cantidadArticulos;
                if(dia <= 7){
                    primeraSemana += cantidadArticulos;
                } else{
                    segundaSemana += cantidadArticulos;
                }
            } else if(dia > 15 && dia <= 23){
                terceraSemana += cantidadArticulos;
            } else{
                cuartaSemana += cantidadArticulos;
            }

            cout << "Ingrese el numero de articulo: ";
            cin >> numeroArticulo;
        }

        if(cantidadArticulosIngresados == 0){
            artMejorPrimerQuincena = articuloAnterior;
        }else{
            if(ventasPrimerQuincena > ventasMejorQuincena){
                artMejorPrimerQuincena = articuloAnterior;
                ventasMejorQuincena = ventasPrimerQuincena;
            }
        }

        cout << endl << "Recaudacion de articulo " << articuloAnterior << ": " << "$" << recaudacionDelMes << endl << endl;

        cantidadArticulosIngresados++;
    }

    laMejorSemana = "Primera Semana";
    if(segundaSemana > mejorSemana){
        laMejorSemana = "Segunda Semana";
    }
    if(terceraSemana > mejorSemana){
        laMejorSemana = "Tercera Semana";
    }
    if(cuartaSemana > mejorSemana){
        laMejorSemana = "Cuarta Semana";
    }

    cout << endl << "Semana con mejor venta: " << laMejorSemana << endl;

    if(artMejorPrimerQuincena == 0){
        cout << "No se vendierona articulos en la primer quincena" << endl;
    } else{
        cout << "Articulo mas vendido primer quincena: " << artMejorPrimerQuincena << endl;
    }

    /* 10 - Una empresa aérea registró los vuelos durante el mes pasado. Los registros están
    agrupados por número de avión. El lote finaliza con un registro con código de avión igual a
    cero. Cada registro contiene:
    - Número de avión (1 a 50)
    - Día del vuelo (1 a 31)
    - Cantidad de asientos vendidos
    - Cantidad de asientos no vendidos
    - Minutos de puntualidad (> 0 si llegó atrasado, 0 si llegó en hora, < 0 si se adelantó)
    Se pide determinar e informar:
    a) El número de avión que tuvo menor porcentaje de asientos ocupados respecto al total de
    asientos a ocupar, considerando todos los vuelos que haya efectuado en el mes.
    b) El número de avión que sumó mayor cantidad de minutos de atraso.
    c) Informar el día y número de avión que haya tenido la mayor cantidad individual de
    minutos de atraso. */

    int numeroAvion;

    cout << "Ingrese el numero de avion: ";
    cin >> numeroAvion;

    while(numeroAvion != 0){

        int dia;
        float asientosVendidosVuelo = 0;
        float asientosNoVendidosVuelo = 0;
        float asientosVendidosMes = 0;
        float asientosNoVendidosMes = 0;
        float totalAsientos = 0;
        float porcentajeVendido;
        int minutosPuntualidad;
        int minutosAtrasoMes = 0;
        int minutosAtrasoVuelo = 0;
        int mayorAtrasoVuelo = 0;
        int nroAvionAnterior;

        nroAvionAnterior = numeroAvion;

        while(numeroAvion == nroAvionAnterior){

            cout << "Ingrese el dia del vuelo: ";
            cin >> dia;

            cout << "Ingrese la cantidad de asientos vendidos: ";
            cin >> asientosVendidosVuelo;

            cout << "Ingrese la cantidad de asientos no vendidos: ";
            cin >> asientosNoVendidosVuelo;

            cout << "Ingrese los minutos de puntualidad: ";
            cin >> minutosPuntualidad;

            asientosVendidosMes += asientosVendidosVuelo;
            asientosNoVendidosMes += asientosNoVendidosVuelo;

            minutosAtrasoMes += minutosPuntualidad;

            cout << "Ingrese el numero de avion: ";
            cin >> numeroAvion;


        }

        totalAsientos = asientosVendidosMes + asientosNoVendidosMes;
        porcentajeVendido = (asientosVendidosMes*100)/totalAsientos;
        cout << endl << "Porcentaje de asientos vendidos vuelo " << nroAvionAnterior << ": " << porcentajeVendido << "%" <<endl;
    }
